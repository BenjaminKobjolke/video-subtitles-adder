### BEGIN GENERAL RULES

You do not refractor code by yourself.
Wait until you get clear instructions for refractoring from the user.

When the user reports a bug think about your recent changes if those could have caused the bug. Only if you are sure those are not the case or you and the user debugged those new changes properly then can you think about other resons for the bug.

If you encounter any new information that could improve the efficiency of AI assistants when working on this project, add it to the `.clinerules` file.

Ensure that the information is added to the appropriate section:
- **BEGIN SYSTEM:** Add information relevant only to the current system.
- **BEGIN Local project specific hints:** Add information specific to the current project.

Organizing information correctly ensures accurate and efficient assistance in future tasks.

### BEGIN SYSTEM

# System Environment

OS: Windows
Shell: Windows PowerShell

# Shell Limitations

## PowerShell does not support && to combine commands

For example this will not work:
python -m venv venv && .venv\Scripts\activate

Therefore execute commands separately.
For example create the directories one by one.

## How to delete files and folders

"del" command does not work in powershell.
use "Remove-Item"

## How to create multiple folders

Example: mkdir src\core\rules; mkdir src\core\compare


# Helper Scripts

Provide .bat files for automation:
install.bat:
@echo off
echo Installing dependencies...
pause

run.bat:
@echo off
echo Running application...
pause

activate_environment.bat (for python)
@echo off
%~dp0\venv\Scripts\activate.bat

Use windows "call" before executing applications in the bat files.
Like "call python" or "call pip"

### BEGIN PROJECT

# Structure

- Keep a concise README.md explaining setup and usage
- Group related functionality into separate modules
- Store configuration in separate files

### BEGIN LANGUAGE PYTHON

# Coding Standards

- You split large code blocks into managble files and classes.
- Group related classes/functions into separate files under modules.
- Follow PEP 8 style guidelines
- Use docstrings and type hints
- Auto-format code with black
- Use flake8 for linting
- Modular Design
- Never use plain dicts to handle data between function and classes. Create a class for that.

# Virtual Environments

- Create venv for dependency isolation. But only if the directory doesnt exist yet.
- Maintain requirements.txt. Update it after adding new libraries (e.g., pip freeze > requirements.txt). 
- Use latest stable versions of packages

# Logging Best Practices

- Use Python's logging module
- Avoid print statements
- Handle exceptions with proper error messages
- Use appropriate log levels (INFO, WARNING, ERROR)

# Entry Points

- Use main.py for argument parsing and flow
- Use if **name** == "**main**" pattern
- Import modules as needed

# Dependencies

- Maintain requirements.txt file
- Update after adding new libraries (pip freeze > requirements.txt)
- Use latest stable versions for new features and fixes

# Error Handling

- Always use logging class, not print statements
- Handle errors gracefully with clear messages or fallback procedures
- Implement fallback procedures when needed

# Configuration

- Store settings in settings.ini at the project root. Parse these using Pythonâ€™s configparser.